Index: app/src/main/java/com/example/apppetrobras/RelatorioProcesso.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.apppetrobras;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\n\r\nimport android.app.Dialog;\r\nimport android.content.Context;\r\nimport android.content.SharedPreferences;\r\nimport android.graphics.Color;\r\nimport android.graphics.drawable.ColorDrawable;\r\nimport android.os.Bundle;\r\nimport android.view.View;\r\nimport android.view.animation.Animation;\r\nimport android.view.animation.AnimationUtils;\r\nimport android.widget.Button;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport com.example.apppetrobras.api.RetroFitClient;\r\nimport com.example.apppetrobras.models.UserAPI;\r\nimport com.google.android.material.floatingactionbutton.FloatingActionButton;\r\n\r\nimport java.util.List;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\npublic class RelatorioProcesso extends AppCompatActivity {\r\n\r\n    FloatingActionButton add_icon, download_icon, observacoes_icon;\r\n    Animation fabOpen, fabClose, rotateForward, rotateBackward;\r\n    Dialog mDialog;\r\n    SharedPreferences sp;\r\n    SharedPreferences.Editor editor;\r\n\r\n    boolean isOpen = false; // by default it is false\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_relatorio_processo);\r\n\r\n        add_icon = (FloatingActionButton) findViewById(R.id.add_icon);\r\n        download_icon = (FloatingActionButton) findViewById(R.id.download_icon);\r\n        observacoes_icon = (FloatingActionButton) findViewById(R.id.observacoes_icon);\r\n        mDialog = new Dialog(this);\r\n        settingTheName();\r\n\r\n\r\n\r\n        // animations\r\n        fabOpen = AnimationUtils.loadAnimation(this, R.anim.fab_open);\r\n        fabClose = AnimationUtils.loadAnimation(this, R.anim.fab_close);\r\n\r\n        rotateForward = AnimationUtils.loadAnimation(this, R.anim.rotate_forward);\r\n        rotateBackward = AnimationUtils.loadAnimation(this, R.anim.rotate_backward);\r\n\r\n        // FAB chamando a função \"animateFab()\"\r\n        add_icon.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n\r\n                animateFab();\r\n\r\n\r\n            }\r\n        });\r\n\r\n        // Botão de download presente no FAB\r\n        download_icon.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                animateFab();\r\n                Toast.makeText(RelatorioProcesso.this, \"download clicked\", Toast.LENGTH_SHORT).show();\r\n            }\r\n        });\r\n\r\n\r\n        // Botão de observações presente no FAB chamando o seu popup de observações\r\n        observacoes_icon.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n\r\n                mDialog.setContentView(R.layout.popup_observacoes);\r\n                mDialog.getWindow().setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));\r\n                mDialog.show();\r\n\r\n            }\r\n        });\r\n\r\n        SharedPreferences sharedPreferences = getSharedPreferences(\r\n                getString(R.string.preference_file_key), Context.MODE_PRIVATE);\r\n\r\n        String chave = sharedPreferences.getString(\"nome\", \"\");\r\n\r\n        Call<List<CRelatorio>> call = RetroFitClient\r\n                .getInstance()\r\n                .getAPI()\r\n                .getRelatorio(chave);\r\n\r\n        call.enqueue(new Callback<List<CRelatorio>>() {\r\n            @Override\r\n            public void onResponse(Call<List<CRelatorio>> call, Response<List<CRelatorio>> response) {\r\n                if (!response.isSuccessful()){\r\n                    Toast.makeText(RelatorioProcesso.this, response.code(), Toast.LENGTH_SHORT).show();\r\n                    return;\r\n                }\r\n\r\n                List<CRelatorio> cRelatorioList = response.body();\r\n                CRelatorio cRelatorio = cRelatorioList.get(0);\r\n\r\n                int idRelatorio =cRelatorio.getIdRelatorio();\r\n                String Nome =cRelatorio.getNome();\r\n                String Chave =cRelatorio.getChave();\r\n                String DataProcesso =cRelatorio.getDataProcesso();\r\n                String secao = cRelatorio.getSecao();\r\n                String Titulo =cRelatorio.getTitulo();\r\n                int SolucaoStop = cRelatorio.getSolucaostop();\r\n                int Funcionou = cRelatorio.getFuncionou();\r\n                String Made_check = cRelatorio.getMade_check();\r\n\r\n\r\n                Toast.makeText(RelatorioProcesso.this, secao, Toast.LENGTH_SHORT).show();\r\n                Toast.makeText(RelatorioProcesso.this, \"secao\", Toast.LENGTH_SHORT).show();\r\n\r\n            }\r\n\r\n            @Override\r\n            public void onFailure(Call<List<CRelatorio>> call, Throwable t) {\r\n\r\n            }\r\n        });\r\n\r\n\r\n    }\r\n\r\n    private void settingTheName() {\r\n\r\n        TextView nome_usuario;\r\n        nome_usuario=findViewById(R.id.nome_usuario);\r\n\r\n\r\n        SharedPreferences sharedPreferences = getSharedPreferences(\r\n                getString(R.string.preference_file_key), Context.MODE_PRIVATE);\r\n\r\n        String SayMyName = sharedPreferences.getString(\"nome\", \"\");\r\n\r\n        nome_usuario.setText(SayMyName);\r\n\r\n    }\r\n\r\n\r\n    // Método para o FAB chamar os botões presentes, realizando sua animação de rotação.\r\n    private void animateFab() {\r\n        if (isOpen) {\r\n\r\n            add_icon.startAnimation(rotateBackward);\r\n            download_icon.startAnimation(fabClose);\r\n            observacoes_icon.startAnimation(fabClose);\r\n            download_icon.setClickable(false);\r\n            observacoes_icon.setClickable(false);\r\n            isOpen=false;\r\n\r\n        }\r\n        else {\r\n\r\n            add_icon.startAnimation(rotateForward);\r\n            download_icon.startAnimation(fabOpen);\r\n            observacoes_icon.startAnimation(fabOpen);\r\n            download_icon.setClickable(true);\r\n            observacoes_icon.setClickable(true);\r\n            isOpen=true;\r\n\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/apppetrobras/RelatorioProcesso.java b/app/src/main/java/com/example/apppetrobras/RelatorioProcesso.java
--- a/app/src/main/java/com/example/apppetrobras/RelatorioProcesso.java	(revision e675a0b34d7c30b7f575e9334018304d23759d55)
+++ b/app/src/main/java/com/example/apppetrobras/RelatorioProcesso.java	(date 1664365354432)
@@ -25,7 +25,7 @@
 import retrofit2.Callback;
 import retrofit2.Response;
 
-public class RelatorioProcesso extends AppCompatActivity {
+public class RelatorioProcesso extends DrawerBaseActivity {
 
     FloatingActionButton add_icon, download_icon, observacoes_icon;
     Animation fabOpen, fabClose, rotateForward, rotateBackward;
